{"version":3,"file":"808.js","mappings":"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","sources":["webpack://sleact_front/./pages/Channel/index.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport ChatBox from '@components/ChatBox'\nimport ChatList from '@components/ChatList'\nimport useInput from '@hooks/useInput'\nimport makeSection from '@utils/makeSection'\nimport Scrollbars from 'react-custom-scrollbars'\nimport { useParams } from 'react-router'\nimport useSocket from '@hooks/useSocket'\nimport useSWR, { useSWRInfinite } from 'swr'\nimport fetcher from '@utils/fetcher'\nimport { DMStyle } from '../DirectMessage/styles'\nimport { IChannel, IChat, IUser } from '../../typings/db'\nimport axios from 'axios'\nimport InviteChannelModal from '../../components/InviteChannelModal'\n\nconst Channel = () => {\n\tconst { workspace, channel } = useParams<{ workspace: string, channel: string }>()\n\tconst [showInviteChannelModal, setShowInviteChannelModal] = useState(false)\n\tconst scrollbarRef = useRef<Scrollbars>(null);\n\tconst [socket] = useSocket(workspace)\n\tconst { data: myData } = useSWR(`/api/users`, fetcher)\n\tconst { data: channelData } = useSWR<IChannel>(`/api/workspaces/${workspace}/channels/${channel}`, fetcher)\n\tconst { data: chatData, mutate: mutateChat, revalidate, setSize } = useSWRInfinite<IChat[]>(\n\t\t(index) => `/api/workspaces/${workspace}/channels/${channel}/chats?perPage=20&page=${index + 1}`,\n\t\tfetcher\n\t);\n\tconst { data: channelMembersData } = useSWR<IUser[]>(\n\t\tmyData ? `/api/workspaces/${workspace}/channels/${channel}/members` : null, fetcher\n\t)\n\n\tconst isEmpty = chatData?.[0]?.length === 0;\n\tconst isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false\n\n\tconst [chat, onChangeChat, setChat] = useInput('')\n\n\tconst onSubmitForm = useCallback((e) => {\n\t\te.preventDefault();\n\t\tif (chat?.trim() && chatData && channelData) {\n\t\t\tconst savedChat = chat;\n\t\t\tmutateChat((prevChatData) => {\n\t\t\t\tprevChatData?.[0].unshift({\n\t\t\t\t\tid: (chatData[0][0]?.id || 0) + 1,\n\t\t\t\t\tcontent: savedChat,\n\t\t\t\t\tUserId: myData.id,\n\t\t\t\t\tUser: myData,\n\t\t\t\t\tChannelId: channelData.id,\n\t\t\t\t\tChannel: channelData,\n\t\t\t\t\tcreatedAt: new Date()\n\t\t\t\t});\n\t\t\t\treturn prevChatData\n\t\t\t}, false).then(() => {\n\t\t\t\tsetChat('')\n\t\t\t\tif (scrollbarRef.current) {\n\t\t\t\t\tscrollbarRef.current?.scrollToBottom()\n\t\t\t\t}\n\t\t\t})\n\t\t\taxios.post(`/api/workspaces/${workspace}/channels/${channel}/chats`, {\n\t\t\t\tcontent: chat\n\t\t\t}).then(() => {\n\t\t\t\trevalidate()\n\t\t\t})\n\t\t\t.catch(error => console.dir(error))\n\t\t}\n\t\tsetChat('')\n\t}, [chat, chatData, myData, channelData, workspace, channel])\n\n\t//put the scrollbar at the bottom when loading\n\tuseEffect(() => {\n\t\tif (chatData?.length === 1) {\n\t\t\tscrollbarRef.current?.scrollToBottom()\n\t\t}\n\t}, [chatData])\n\n\n\tconst onMessage = useCallback((data: IChat) => {\n\t\tif (data.Channel.name === channel && data.UserId !== myData.id) {\n\t\t\tmutateChat((chatData) => {\n\t\t\t\tchatData?.[0].unshift(data);\n\t\t\t\treturn chatData\n\t\t\t}, false).then(() => {\n\t\t\t\tif (scrollbarRef.current) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tscrollbarRef.current.getScrollHeight() <\n\t\t\t\t\t\tscrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n\t\t\t\t\t) {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tscrollbarRef.current?.scrollToBottom();\n\t\t\t\t\t\t}, 50)\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}, [channel, mutateChat, myData])\n\n\tuseEffect(() => {\n\t\tsocket?.on('dm', onMessage);\n\t\treturn () => {\n\t\t\tsocket?.off('dm', onMessage)\n\t\t}\n\t}, [socket, myData])\n\n\tconst onClickInviteChannel = useCallback(() => {\n\t\tsetShowInviteChannelModal(true)\n\t}, [])\n\n\tconst onCloseModal = useCallback(() => {\n\t\tsetShowInviteChannelModal(false)\n\t}, [])\n\n\tif (!channelData || !myData) {\n\t\treturn null;\n\t}\n\n\tconst chatSections = makeSection(chatData ? chatData.flat().reverse() : [])\n\n\treturn (\n\t\t<DMStyle.Container>\n\t\t\t<DMStyle.Header>\n\t\t\t\t<span>#{channel}</span>\n\t\t\t\t<div className=\"header-right\">\n\t\t\t\t\t<span>{channelMembersData?.length}</span>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={onClickInviteChannel}\n\t\t\t\t\t\tclassName=\"c-button-unstyled p-ia__view_header__button\"\n\t\t\t\t\t\taria-label=\"Add people to #react-native\"\n\t\t\t\t\t\tdata-sk=\"tooltip_parent\"\n\t\t\t\t\t\ttype=\"button\">\n\t\t\t\t\t\t<i className=\"c-icon p-ia__view_header__button_icon c-icon--add-user\" aria-hidden=\"true\" />\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</DMStyle.Header>\n\t\t\t<ChatList\n\t\t\t\tchatSections={chatSections}\n\t\t\t\tscrollRef={scrollbarRef}\n\t\t\t\tsetSize={setSize}\n\t\t\t\tisReachingEnd={isReachingEnd}\n\t\t\t/>\n\t\t\t<ChatBox chat={chat} onChangechat={onChangeChat} onSubmitForm={onSubmitForm} />\n\t\t\t<InviteChannelModal\n\t\t\t\tshow={showInviteChannelModal}\n\t\t\t\tonCloseModal={onCloseModal}\n\t\t\t\tsetShowInviteModal={setShowInviteChannelModal}\n\t\t\t/>\n\t\t</DMStyle.Container>\n\t)\n}\n\nexport default Channel"],"names":["workspace","channel","useParams","showInviteChannelModal","setShowInviteChannelModal","useState","scrollbarRef","useRef","socket","useSocket","data","myData","useSWR","fetcher","channelData","chatData","mutate","mutateChat","revalidate","setSize","useSWRInfinite","index","channelMembersData","isReachingEnd","length","chat","onChangeChat","setChat","useInput","onSubmitForm","useCallback","e","preventDefault","trim","savedChat","prevChatData","unshift","id","content","UserId","User","ChannelId","Channel","createdAt","Date","then","current","scrollToBottom","axios","catch","error","console","dir","useEffect","onMessage","name","getScrollHeight","getClientHeight","getScrollTop","setTimeout","on","off","onClickInviteChannel","onCloseModal","chatSections","makeSection","flat","reverse","className","onClick","type","scrollRef","onChangechat","show","setShowInviteModal"],"sourceRoot":""}