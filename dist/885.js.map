{"version":3,"file":"885.js","mappings":"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","sources":["webpack://sleact_front/./components/ChatBox/styles.tsx","webpack://sleact_front/./components/ChatBox/index.tsx","webpack://sleact_front/./components/Chat/styles.tsx","webpack://sleact_front/./components/Chat/index.tsx","webpack://sleact_front/./components/ChatList/styles.tsx","webpack://sleact_front/./components/ChatList/index.tsx","webpack://sleact_front/./pages/DirectMessage/styles.tsx","webpack://sleact_front/./utils/makeSection.ts"],"sourcesContent":["import styled from '@emotion/styled';\nimport { MentionsInput } from 'react-mentions';\n\nexport const ChatBoxStyles = {\n  ChatArea: styled.div`\n  display: flex;\n  width: 100%;\n  padding: 20px;\n  padding-top: 0;\n`,\n  Form: styled.form`\n  color: rgb(29, 28, 29);\n  font-size: 15px;\n  width: 100%;\n  border-radius: 4px;\n  border: 1px solid rgb(29, 28, 29);\n`,\n  MentionsTextarea: styled(MentionsInput)`\n  font-family: Slack-Lato, appleLogo, sans-serif;\n  font-size: 15px;\n  padding: 8px 9px;\n  width: 100%;\n  & strong {\n    background: skyblue;\n  }\n  & textarea {\n    height: 44px;\n    padding: 9px 10px !important;\n    outline: none !important;\n    border-radius: 4px !important;\n    resize: none !important;\n    line-height: 22px;\n    border: none;\n  }\n  & ul {\n    border: 1px solid lightgray;\n    max-height: 200px;\n    overflow-y: auto;\n    padding: 9px 10px;\n    background: white;\n    border-radius: 4px;\n    width: 150px;\n  }\n`,\n\n  Toolbox: styled.div`\n  position: relative;\n  background: rgb(248, 248, 248);\n  height: 41px;\n  display: flex;\n  border-top: 1px solid rgb(221, 221, 221);\n  align-items: center;\n  border-bottom-left-radius: 4px;\n  border-bottom-right-radius: 4px;\n`,\n\n  SendButton: styled.button`\n  position: absolute;\n  right: 5px;\n  top: 5px;\n`\n  , EachMention: styled.button<{ focus: boolean }>`\n  padding: 4px 20px;\n  background: transparent;\n  border: none;\n  display: flex;\n  align-items: center;\n  color: rgb(28, 29, 28);\n  width: 100%;\n  & img {\n    margin-right: 5px;\n  }\n  ${({ focus }) =>\n      focus &&\n      `\n    background: #1264a3;\n    color: white;\n  `};\n`,\n}\n","import React, { useEffect, useRef, VFC } from 'react'\nimport autosize from 'autosize'\nimport { useCallback } from \"react\"\nimport { ChatBoxStyles } from \"@components/ChatBox/styles\"\nimport { MentionsInput, Mention, SuggestionDataItem } from 'react-mentions'\nimport gravatar from 'gravatar'\nimport useSWR from 'swr'\nimport { IUser } from '../../typings/db'\nimport fetcher from '../../utils/fetcher'\nimport { useParams } from 'react-router'\n\ninterface Props {\n\tchat: string;\n\tonSubmitForm: (e: any) => void;\n\tonChangechat: (e: any) => void;\n\tplaceholder?: string\n}\n\nconst ChatBox: VFC<Props> = ({ chat, onSubmitForm, onChangechat, placeholder }) => {\n\tconst textareaRef = useRef<HTMLTextAreaElement>(null)\n\tconst { workspace } = useParams<{ workspace: string }>()\n\tconst { data: userData, error, revalidate, mutate } = useSWR<IUser | false>('/api/users', fetcher, {\n\t\tdedupingInterval: 1000\n\t})\n\tconst { data: memberData } = useSWR<IUser[]>(userData ? `/api/workspaces/${workspace}/members` : null, fetcher)\n\n\tuseEffect(() => {\n\t\tif (textareaRef.current) {\n\t\t\tautosize(textareaRef.current)\n\t\t}\n\t}, [textareaRef.current])\n\n\tconst onKeyDownChat = useCallback(\n\t\t(e) => {\n\t\t\tif (e.key === 'Enter') {\n\t\t\t\tif (!e.shiftKey) {\n\t\t\t\t\te.preventDefault()\n\t\t\t\t\tonSubmitForm(e)\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t[chat]\n\t)\n\n\n\tconst renderSuggestion = useCallback(\n\t\t(suggestion: SuggestionDataItem,\n\t\t\tsearch: string,\n\t\t\thighlightedDisplay: React.ReactNode,\n\t\t\tindex: number,\n\t\t\tfocus: boolean): React.ReactNode => {\n\t\t\tif (!memberData) return;\n\t\t\treturn (\n\t\t\t\t<ChatBoxStyles.EachMention focus={focus}>\n\t\t\t\t\t<img src={gravatar.url(memberData[index].email, { s: '20px', d: 'retro' })} alt={memberData[index].nickname} />\n\t\t\t\t\t<span>{highlightedDisplay}</span>\n\t\t\t\t</ChatBoxStyles.EachMention>\n\t\t\t)\n\n\t\t}, [memberData])\n\n\treturn (\n\t\t<ChatBoxStyles.ChatArea>\n\t\t\t<ChatBoxStyles.Form onSubmit={onSubmitForm}>\n\t\t\t\t<ChatBoxStyles.MentionsTextarea\n\t\t\t\t\tid=\"editor-chat\"\n\t\t\t\t\tvalue={chat}\n\t\t\t\t\tonChange={onChangechat}\n\t\t\t\t\tonKeyDown={onKeyDownChat}\n\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\tinputRef={textareaRef}\n\t\t\t\t\tallowSuggestionsAboveCursor\n\t\t\t\t>\n\t\t\t\t\t<Mention\n\t\t\t\t\t\tappendSpaceOnAdd\n\t\t\t\t\t\ttrigger=\"@\"\n\t\t\t\t\t\tdata={memberData?.map((v) => ({ id: v.id, display: v.nickname })) || []}\n\t\t\t\t\t\trenderSuggestion={renderSuggestion} />\n\t\t\t\t</ChatBoxStyles.MentionsTextarea>\n\t\t\t\t<ChatBoxStyles.Toolbox>\n\t\t\t\t\t<ChatBoxStyles.SendButton\n\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\t'c-button-unstyled c-icon_button c-icon_button--light c-icon_button--size_medium c-texty_input__button c-texty_input__button--send' +\n\t\t\t\t\t\t\t(chat?.trim() ? '' : ' c-texty_input__button--disabled')\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdata-qa=\"texty_send_button\"\n\t\t\t\t\t\taria-label=\"Send message\"\n\t\t\t\t\t\tdata-sk=\"tooltip_parent\"\n\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\tdisabled={!chat?.trim()}\n\t\t\t\t\t>\n\t\t\t\t\t\t<i className='c-icon c-icon--paperplane-filled' aria-hidden=\"true\" />\n\t\t\t\t\t</ChatBoxStyles.SendButton>\n\t\t\t\t</ChatBoxStyles.Toolbox>\n\t\t\t</ChatBoxStyles.Form>\n\t\t</ChatBoxStyles.ChatArea>\n\t)\n}\n\nexport default ChatBox","import styled from '@emotion/styled'\n\nexport const ChatStyle = {\n\tWrapper: styled.div`\n\tdisplay: flex;\n\tpadding: 8px 20px;\n\t&:hover{\n\t\tbackground:#eee;\n\t};\n\t& .chat-img{\n\t\tdisplay: flex;\n\t\twidth:36px;\n\t\tmargin-right:9px;\n\t\t& img{\n\t\t\twidth:36px;\n\t\t\theight:36px;\n\t\t}\n\t}\n\t`\n}","import React, { VFC, memo, useMemo } from 'react'\nimport gravatar from 'gravatar'\nimport { IChat, IDM } from '../../typings/db'\nimport { ChatStyle } from './styles'\nimport dayjs from 'dayjs'\nimport regexifyString from 'regexify-string'\nimport { Link, useParams } from 'react-router-dom'\n\ninterface Props {\n\tdata: IDM | IChat\n}\n\nconst Chat: VFC<Props> = ({ data }) => {\n\tconst { workspace } = useParams<{ workspace: string, channel: string }>()\n\tconst user = 'Sender' in data ? data.Sender : data.User;\n\n\t// \\d === number, + more than 1, ? 0 or 1, * more than 0, g === global\n\tconst result = useMemo(() => regexifyString({\n\t\tinput: data.content,\n\t\tpattern: /@\\[(.+?)\\]\\((\\d+?)\\)|\\n/g,\n\t\tdecorator(match, index) {\n\t\t\tconst arr: string[] | null = match.match(/@\\[(.+?)\\]\\((\\d+?)\\)/)!;\n\t\t\tif (arr) {\n\t\t\t\treturn (\n\t\t\t\t\t<Link key={match + index} to={`/workspace/${workspace}/dm/${arr[2]}`}>\n\t\t\t\t\t\t@{arr[1]}\n\t\t\t\t\t</Link>\n\t\t\t\t)\n\t\t\t}\n\t\t\treturn <br key={index} />\n\t\t}\n\t}), [data.content])\n\n\treturn (\n\t\t<ChatStyle.Wrapper>\n\t\t\t<div className=\"chat-img\">\n\t\t\t\t<img src={gravatar.url(user.email, { s: '36px', d: 'retro' })} alt={user.nickname} />\n\t\t\t</div>\n\t\t\t<div className=\"chat-text\">\n\t\t\t\t<div className=\"chat-user\">\n\t\t\t\t\t<b>{user.nickname}</b>\n\t\t\t\t\t<span>{dayjs(data.createdAt).format(' h:mm A')}</span>\n\t\t\t\t</div>\n\t\t\t\t<p>{result}</p>\n\t\t\t</div>\n\t\t</ChatStyle.Wrapper>\n\t)\n}\n\nexport default memo(Chat)","import styled from '@emotion/styled';\n\nexport const ChatListStyle = {\n\tChatZone: styled.div`\n  width: 100%;\n  display: flex;\n  flex: 1;\n`,\n\tSection: styled.section`\n  margin-top: 20px;\n  border-top: 1px solid #eee;\n`,\n\tStickyHeader: styled.div`\n  display: flex;\n  justify-content: center;\n  flex: 1;\n  width: 100%;\n  position: sticky;\n  top: 14px;\n  & button {\n    font-weight: bold;\n    font-size: 13px;\n    height: 28px;\n    line-height: 27px;\n    padding: 0 16px;\n    z-index: 2;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 1px 3px 0 rgba(0, 0, 0, 0.08);\n    border-radius: 24px;\n    position: relative;\n    top: -13px;\n    background: white;\n    border: none;\n    outline: none;\n  }\n`\n}","import React, { useCallback, RefObject } from 'react'\nimport { IChat, IDM } from '@typings/db'\nimport Chat from '../Chat'\nimport { ChatListStyle } from './styles'\nimport { Scrollbars } from 'react-custom-scrollbars'\n\ninterface Props {\n\tchatSections: { [key: string]: (IDM | IChat)[] }\n\tsetSize: (f: (index: number) => number) => Promise<(IDM | IChat)[][] | undefined>;\n\tisReachingEnd: boolean\n\tscrollRef: RefObject<Scrollbars>\n}\n\nconst ChatList: React.FC<Props> = ({ chatSections, setSize, isReachingEnd, scrollRef }) => {\n\tconst onScroll = useCallback((values) => {\n\t\tif (values.scrollTop === 0 && !isReachingEnd) {\n\t\t\tsetSize((prevSize) => prevSize + 1).then(() => {\n\t\t\t\tif (scrollRef?.current) {\n\t\t\t\t\tscrollRef.current?.scrollTop(scrollRef.current?.getScrollHeight() - values.scrollHeight)\n\t\t\t\t}\n\t\t\t});\n\t\t\t//data added\n\t\t}\n\t}, [])\n\n\treturn (\n\t\t<ChatListStyle.ChatZone>\n\t\t\t<Scrollbars autoHide ref={scrollRef} onScrollFrame={onScroll}>\n\t\t\t\t{Object.entries(chatSections).map(([date, chats]) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<ChatListStyle.Section className={`section-${date}`} key={date}>\n\t\t\t\t\t\t\t<ChatListStyle.StickyHeader>\n\t\t\t\t\t\t\t\t<button>{date}</button>\n\t\t\t\t\t\t\t</ChatListStyle.StickyHeader>\n\t\t\t\t\t\t\t{chats.map((chat: (IDM | IChat)) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<Chat key={chat.id} data={chat} />\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</ChatListStyle.Section>\n\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</Scrollbars>\n\t\t</ChatListStyle.ChatZone>\n\t)\n}\n\nexport default ChatList","import styled from '@emotion/styled';\n\nexport const DMStyle = {\n  Container: styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  flex-flow: column;\n  position: relative;\n`,\n  Header: styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n  & img {\n    margin-right: 5px;\n  }\n\n  & .header-right{\n    display: flex;\n    flex:1;\n    justify-content: flex-end;\n    align-items: center;\n  }\n`,\n  DragOver: styled.div`\n  position: absolute;\n  top: 64px;\n  left: 0;\n  width: 100%;\n  height: calc(100% - 64px);\n  background: white;\n  opacity: 0.7;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 40px;\n`\n}","import { IDM, IChat } from '@typings/db';\nimport dayjs from 'dayjs';\n\nexport default function makeSection(chatList: (IDM | IChat)[]) {\n  const sections: { [key: string]: (IDM | IChat)[] } = {};\n  chatList.forEach((chat) => {\n    const monthDate = dayjs(chat.createdAt).format('YYYY-MM-DD');\n    if (Array.isArray(sections[monthDate])) {\n      sections[monthDate].push(chat);\n    } else {\n      sections[monthDate] = [chat];\n    }\n  });\n\n  return sections;\n}\n"],"names":["ChatBoxStyles","ChatArea","Form","MentionsTextarea","MentionsInput","Toolbox","SendButton","EachMention","focus","chat","onSubmitForm","onChangechat","placeholder","textareaRef","useRef","workspace","useParams","data","userData","error","revalidate","mutate","useSWR","fetcher","dedupingInterval","memberData","useEffect","current","autosize","onKeyDownChat","useCallback","e","key","shiftKey","preventDefault","renderSuggestion","suggestion","search","highlightedDisplay","index","src","gravatar","email","s","d","alt","nickname","onSubmit","id","value","onChange","onKeyDown","inputRef","allowSuggestionsAboveCursor","appendSpaceOnAdd","trigger","map","v","display","className","trim","type","disabled","ChatStyle","Wrapper","Chat","user","Sender","User","result","useMemo","regexifyString","input","content","pattern","decorator","match","arr","to","dayjs","createdAt","format","memo","ChatListStyle","ChatZone","Section","StickyHeader","chatSections","setSize","isReachingEnd","scrollRef","onScroll","values","scrollTop","prevSize","then","getScrollHeight","scrollHeight","autoHide","ref","onScrollFrame","Object","entries","date","chats","DMStyle","Container","Header","DragOver","makeSection","chatList","sections","forEach","monthDate","Array","isArray","push"],"sourceRoot":""}